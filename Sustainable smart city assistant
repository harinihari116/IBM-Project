# -*- coding: utf-8 -*-
"""Sustainable smart city AI.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xATpE1UIGhF6wYCKLx6WF_tblk2D612D
"""

!pip install transformers torch gradio PyPDF2

import gradio as gr
import torch
from transformers import AutoTokenizer, AutoModelForCausalLM
import PyPDF2

from transformers import AutoModelForCausalLM, AutoTokenizer, set_seed
import torch

model_path = "ibm-granite/granite-3.3-2b-instruct"
device = "cuda" if torch.cuda.is_available() else "cpu"

model = AutoModelForCausalLM.from_pretrained(
    model_path,
    device_map=device,
    torch_dtype=torch.bfloat16 if torch.cuda.is_available() else torch.float32,
)

tokenizer = AutoTokenizer.from_pretrained(model_path)

# Generate eco-friendly tips
def tips_generator(problem_keywords):
    prompt = f"""
You are an eco-assistant helping urban residents in India live sustainably.

Problem: {problem_keywords}

Here are 5 practical, diverse, and context-aware eco-friendly tips:

1. Use cloth bags instead of plastic when shopping.
2. Install low-flow faucets to reduce water usage.
3. Compost kitchen waste to enrich soil and reduce landfill.
4. Switch to LED bulbs to save energy.
5. Use public transport or carpool to reduce emissions.

Now generate 5 new tips for the same problem:
"""
    inputs = tokenizer(prompt, return_tensors="pt").to(device)

    outputs = model.generate(**inputs, max_length=200, do_sample=True, temperature=0.5, top_k=50, top_p=0.9)
    eos_token_id = tokenizer.encode("###")[0]
    eos__token_id=tokenizer.eos_token_id

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.strip()


# Summarize sustainability policies
def policy_summarization(pdf_file, policy_text):
    summary_prompt = ""

    if pdf_file is not None:
        try:
            reader = PyPDF2.PdfReader(pdf_file)
            text = ""
            for page in reader.pages:
                text += page.extract_text()
            summary_prompt = f"Summarize the following sustainability policy:\n{text}"
        except Exception as e:
            return f"Error reading PDF: {e}"

    elif policy_text.strip() != "":
        summary_prompt = f"Summarize the following policy document:\n{policy_text}"
    else:
        return "‚ö†Ô∏è Please upload a file or enter policy text."

    inputs = tokenizer(summary_prompt, return_tensors="pt", truncation=True).to(device)
    outputs = model.generate(**inputs, max_length=300)

    response = tokenizer.decode(outputs[0], skip_special_tokens=True)
    return response.strip()

with gr.Blocks() as app:
    gr.Markdown("## üåÜ Sustainable Smart City Assistance - Eco Assistant & Policy Analyzer")

    with gr.Tabs():
        # Tab 1: Eco Tips
        with gr.Tab("Eco Tips Generator"):
            with gr.Row():
                keywords_input = gr.Textbox(
                    label="Environmental Problem/Keywords",
                    placeholder="e.g., plastic, solar, waste management, energy saving...",
                    lines=3
                )
            tips_output = gr.Textbox(label="üåø Sustainable Living Tips", lines=10)
            generate_btn = gr.Button("Generate Eco Tips")
            generate_btn.click(tips_generator, inputs=keywords_input, outputs=tips_output)

        # Tab 2: Policy Summarization
        with gr.Tab("Policy Summarization"):
            with gr.Row():
                pdf_upload = gr.File(label="üìÑ Upload Policy PDF", file_types=[".pdf"])
                policy_text_input = gr.Textbox(
                    label="Or Paste Policy Text",
                    placeholder="Paste sustainability policy text here...",
                    lines=6
                )
            summary_output = gr.Textbox(label="üìå Policy Summary & Key Points", lines=12)
            summarize_btn = gr.Button("Summarize Policy")

            summarize_btn.click(
                policy_summarization,
                inputs=[pdf_upload, policy_text_input],
                outputs=summary_output
            )

# Launch app with shareable link
app.launch(share=True)
